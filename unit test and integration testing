import unittest
from services import calculate_discount_amount, compute_final_price

class TestDiscountCalculation(unittest.TestCase):
    def test_discount_amount(self):
        # Unit test for calculate_discount_amount function
        self.assertEqual(calculate_discount_amount(100, 10), 10)  # 10% of 100 is 10
        self.assertEqual(calculate_discount_amount(200, 15), 30)  # 15% of 200 is 30
        self.assertEqual(calculate_discount_amount(0, 50), 0)     # Edge case: price is 0
        self.assertEqual(calculate_discount_amount(50, 0), 0)     # Edge case: no discount
        self.assertEqual(calculate_discount_amount(100, 100), 100) # 100% discount

class TestPriceAfterDiscount(unittest.TestCase):
    def test_price_after_discount(self):
        # Integration test for compute_final_price function
        self.assertEqual(compute_final_price(100, 10), 90)  # 100 - 10% of 100 = 90
        self.assertEqual(compute_final_price(200, 15), 170) # 200 - 15% of 200 = 170
        self.assertEqual(compute_final_price(50, 0), 50)    # No discount applied
        self.assertEqual(compute_final_price(0, 50), 0)     # Edge case: price is 0
        self.assertEqual(compute_final_price(100, 100), 0)  # 100% discount


Unit Test: calculate_discount_amount
Testing with a regular price and discount percentage to check if the discount amount is calculated correctly.
The function should return a discount amount of 0 if the price is 0, regardless of the discount percentage.
If the discount percentage is 0, the discount amount should be 0, even if the price is a positive value.
Negative prices should be handled as an error case. The function should not allow negative values.


Integration Test: compute_final_price
The function should correctly apply the discount and return the final price.
If the price is 0, the final price should remain 0, even with a discount applied.
A 100% discount should make the final price 0.


